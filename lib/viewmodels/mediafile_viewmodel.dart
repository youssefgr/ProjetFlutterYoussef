import 'package:flutter/foundation.dart';
import '../Models/Hajer/mediafile.dart';
import '../repositories/mediafile_repository.dart';

/// üß† ViewModel : relie l‚Äôinterface utilisateur au d√©p√¥t (repository)
/// G√®re la logique m√©tier + √©tat UI (chargement, erreurs, notifications)
class MediaFileViewModel extends ChangeNotifier {
  final MediaFileRepository _repo = MediaFileRepository();

  /// Liste actuelle des fichiers m√©dia li√©s √† un MediaItem
  List<MediaFile> files = [];

  /// √âtats de chargement et erreurs
  bool loading = false;
  String? error;

  /// üîÑ Chargement de tous les fichiers d‚Äôun MediaItem
  Future<void> load(String mediaItemId) async {
    _setLoading(true);
    try {
      files = await _repo.fetchByMediaItem(mediaItemId);
      _log('‚úÖ ${files.length} fichiers charg√©s pour mediaItemId=$mediaItemId');
    } catch (e) {
      error = 'Erreur lors du chargement : $e';
      _log(error!, isError: true);
    } finally {
      _setLoading(false);
    }
  }

  /// üì§ Ajout d‚Äôun fichier depuis l‚Äôappareil local
  Future<void> addFromLocal({
    required String mediaItemId,
    required String filePath,
    FileType type = FileType.poster,
    bool removeBackground = false,
    String? removeBgApiKey,
  }) async {
    _setLoading(true);
    try {
      final record = await _repo.createFromLocalFile(
        mediaItemId: mediaItemId,
        filePath: filePath,
        type: type,
        removeBackground: removeBackground,
        removeBgApiKey: removeBgApiKey,
      );
      files.insert(0, record);
      _log('üìÅ Fichier local ajout√© : ${record.filename}');
    } catch (e) {
      error = 'Erreur lors de l‚Äôajout local : $e';
      _log(error!, isError: true);
    } finally {
      _setLoading(false);
    }
  }

  /// ‚òÅÔ∏è Ajout d‚Äôun fichier import√© depuis Google Drive
  Future<void> addFromDrive({
    required String mediaItemId,
    required String driveFileId,
    required String driveFileName,
    FileType type = FileType.poster,
    bool removeBackground = false,
    String? removeBgApiKey,
  }) async {
    _setLoading(true);
    try {
      final record = await _repo.createFromGoogleDrive(
        mediaItemId: mediaItemId,
        driveFileId: driveFileId,
        driveFileName: driveFileName,
        type: type,
        removeBackground: removeBackground,
        removeBgApiKey: removeBgApiKey,
      );
      files.insert(0, record);
      _log('‚òÅÔ∏è Import Drive r√©ussi : ${record.filename}');
    } catch (e) {
      error = 'Erreur import Drive : $e';
      _log(error!, isError: true);
    } finally {
      _setLoading(false);
    }
  }

  /// ‚ùå Suppression d‚Äôun fichier (DB + Storage)
  Future<void> remove(MediaFile file) async {
    _setLoading(true);
    try {
      await _repo.delete(file);
      files.removeWhere((f) => f.id == file.id);
      _log('üóëÔ∏è Fichier supprim√© : ${file.filename}');
    } catch (e) {
      error = 'Erreur suppression : $e';
      _log(error!, isError: true);
    } finally {
      _setLoading(false);
    }
  }

  /// ‚úèÔ∏è Mise √† jour d‚Äôun fichier (future feature : modification metadata)
  Future<void> updateFile(MediaFile updated) async {
    _setLoading(true);
    try {
      await _repo.update(updated);
      final index = files.indexWhere((f) => f.id == updated.id);
      if (index != -1) files[index] = updated;
      _log('‚úèÔ∏è Fichier mis √† jour : ${updated.filename}');
    } catch (e) {
      error = 'Erreur mise √† jour : $e';
      _log(error!, isError: true);
    } finally {
      _setLoading(false);
    }
  }

  // ------------------------------------------------------------
  // üîß Helpers internes
  // ------------------------------------------------------------

  void _setLoading(bool value) {
    loading = value;
    notifyListeners();
  }

  void _log(String message, {bool isError = false}) {
    if (kDebugMode) {
      final tag = isError ? '‚ùå ERROR' : '‚ÑπÔ∏è INFO';
      debugPrint('$tag | MediaFileVM | $message');
    }
  }
}
